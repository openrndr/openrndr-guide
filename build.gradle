group 'org.openrndr.guide'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.5.30'

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://maven.openrndr.org" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        //classpath 'com.github.openrndr:dokgen:96e77e1cbb'
        classpath 'org.openrndr:dokgen:2.0-SNAPSHOT'
        classpath "org.ajoberstar:gradle-git-publish:3.0.0"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'org.openrndr.dokgen-gradle'
apply plugin: 'org.ajoberstar.git-publish'

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceCompatibility = 1.8
project.ext.openrndrVersion = "0.5.1-SNAPSHOT"
project.ext.orxVersion = "0.5.1-SNAPSHOT"

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://maven.openrndr.org" }
    maven { url "https://jitpack.io" }
}

switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        project.ext.openrndrOS = "windows"
        break
    case org.gradle.internal.os.OperatingSystem.LINUX:
        project.ext.openrndrOS = "linux-x64"
        break
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.openrndrOS = "macos"
        break
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2-native-mt'

    testImplementation 'junit:junit:4.13.2'
    implementation 'org.slf4j:slf4j-simple:1.7.32'

    implementation "org.openrndr:openrndr-gl3:$openrndrVersion"
    implementation "org.openrndr:openrndr-gl3-natives-$openrndrOS:$openrndrVersion"
    implementation "org.openrndr:openrndr-core:$openrndrVersion"
    implementation "org.openrndr:openrndr-svg:$openrndrVersion"
    implementation "org.openrndr:openrndr-animatable:$openrndrVersion"
    implementation "org.openrndr:openrndr-extensions:$openrndrVersion"
    implementation "org.openrndr:openrndr-filter:$openrndrVersion"
    implementation "org.openrndr:openrndr-ffmpeg:$openrndrVersion"

    //implementation 'com.github.openrndr:dokgen:96e77e1cbb'
    implementation 'org.openrndr:dokgen:2.0-SNAPSHOT'

    implementation "org.openrndr.extra:orx-camera:$orxVersion"
    implementation "org.openrndr.extra:orx-compositor:$orxVersion"
    implementation "org.openrndr.extra:orx-fx:$orxVersion"
    implementation "org.openrndr.extra:orx-gui:$orxVersion"
    implementation "org.openrndr.extra:orx-image-fit:$orxVersion"
    implementation "org.openrndr.extra:orx-jumpflood:$orxVersion"
    implementation "org.openrndr.extra:orx-kinect-v1:$orxVersion"
    implementation "org.openrndr.extra:orx-mesh-generators:$orxVersion"
    implementation "org.openrndr.extra:orx-midi:$orxVersion"
    implementation "org.openrndr.extra:orx-noise:$orxVersion"
    implementation "org.openrndr.extra:orx-olive:$orxVersion"
    implementation "org.openrndr.extra:orx-osc:$orxVersion"
    implementation "org.openrndr.extra:orx-panel:$orxVersion"
    implementation "org.openrndr.extra:orx-poisson-fill:$orxVersion"
    implementation "org.openrndr.extra:orx-shade-styles:$orxVersion"
}

mainClassName = "TemplateProgramKt"

dokgen {
    runner {
        if (System.properties['os.name'] == "Mac OS X") {
            jvmArgs = ["-XstartOnFirstThread"]
        }
    }

    examples {
        webRootUrl = "https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin"
    }

    docsify {
        media = [file("$projectDir/media"), file("$projectDir/static-media")]
        assets = [file("$projectDir/data/docsify-assets")]
    }
}

task publishDocs { task ->
    doLast {
        gitPublish.repoUri = "git@github.com:openrndr/openrndr-guide.git"
        gitPublish.branch = "master"
        gitPublish.repoDir = file("$buildDir/gitrepo-docs")
        gitPublish.contents.from("build/dokgen/docsify") {
            exclude "node_modules"
        }
        gitPublish.commitMessage = "Update docs"
    }

    task.group = "dokgen"
    task.finalizedBy(gitPublishPush)
}

task publishExamples { task ->
    doLast {
        gitPublish.repoDir = file("$buildDir/gitrepo-examples")
        gitPublish.contents {
            from "$projectDir/src/main/resources/examples-repo-template"
            from("$projectDir/build/dokgen/generated/examples-export") {
                into "src/main/kotlin/examples"
            }
            from("$projectDir/data/images") {
                into "data/images"
            }
            from("$projectDir/data/compute-shaders") {
                into "data/compute-shaders"
            }
        }
        gitPublish.repoUri = "git@github.com:openrndr/openrndr-examples.git"
        gitPublish.branch = "master"
        gitPublish.commitMessage = "Update examples"
    }
    task.group = "dokgen"
    task.finalizedBy(gitPublishPush)
}

ext.mainClassName = mainClassName
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', '**/module-info*'
    archiveName 'myjar.jar'
}
