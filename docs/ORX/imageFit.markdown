---
# File generated by dokgen. Do not edit. 
# Edit 'src/main/kotlin/docs/80_ORX/C200_Image_fit.kt' instead.
layout: default
title: Image fit
parent: ORX
last_modified_at: 2025.10.16 16:50:06 +0000
nav_order: 200
has_children: false
---
 
# Image fit

`orx-image-fit` provides functionality to making the drawing and 
placement of images somewhat easier. 
`orx-image` Fits images in frames with two options, contain and cover, 
similar to CSS object-fit.

## Prerequisites

Assuming you are working on an 
[`openrndr-template`](https://github.com/openrndr/openrndr-template) based
project, all you have to do is enable `orx-image-fit` in the `orxFeatures`
set in `build.gradle.kts` and reimport the gradle project.

## Contain mode 
 
<video controls preload="none" loop poster="../media/image-fit-001-thumb.jpg">
    <source src="../media/image-fit-001.mp4" type="video/mp4">
</video>
 
 
```kotlin
fun main() = application {
    program {
        val image = loadImage("data/images/cheeta.jpg")
        extend {
            val margin = cos(seconds) * 50.0 + 50.0
            drawer.imageFit(image, 20.0, 20.0 + margin / 2, width - 40.0, height - 40.0 - margin, fitMethod = FitMethod.Contain)
            // -- illustrate the placement rectangle
            drawer.fill = null
            drawer.stroke = ColorRGBa.WHITE
            drawer.rectangle(20.0, 20.0 + margin / 2.0, width - 40.0, height - 40.0 - margin)
        }
    }
}
``` 
 
[Link to the full example](https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin/examples/80_ORX/C200_Image_fit000.kt) 
 
Additionally the placement of the image in the rectangle can be adjusted 
 
<video controls preload="none" loop poster="../media/image-fit-002-thumb.jpg">
    <source src="../media/image-fit-002.mp4" type="video/mp4">
</video>
 
 
```kotlin
fun main() = application {
    program {
        val image = loadImage("data/images/cheeta.jpg")
        extend {
            val margin = 100.0
            drawer.imageFit(image, 20.0, 20.0 + margin / 2, width - 40.0, height - 40.0 - margin, horizontalPosition = cos(seconds) * 1.0, fitMethod = FitMethod.Contain)
            // -- illustrate the placement rectangle
            drawer.fill = null
            drawer.stroke = ColorRGBa.WHITE
            drawer.rectangle(20.0, 20.0 + margin / 2.0, width - 40.0, height - 40.0 - margin)
        }
    }
}
``` 
 
[Link to the full example](https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin/examples/80_ORX/C200_Image_fit001.kt) 
 
## Cover mode 
 
<video controls preload="none" loop poster="../media/image-fit-101-thumb.jpg">
    <source src="../media/image-fit-101.mp4" type="video/mp4">
</video>
 
 
```kotlin
fun main() = application {
    program {
        val image = loadImage("data/images/cheeta.jpg")
        extend {
            // -- calculate dynamic margins
            val xm = cos(seconds) * 50.0 + 50.0
            val ym = sin(seconds) * 50.0 + 50.0
            
            drawer.imageFit(image, 20.0 + xm / 2.0, 20.0 + ym / 2, width - 40.0 - xm, height - 40.0 - ym)
            
            // -- illustrate the placement rectangle
            drawer.fill = null
            drawer.stroke = ColorRGBa.WHITE
            drawer.rectangle(20.0 + xm / 2.0, 20.0 + ym / 2.0, width - 40.0 - xm, height - 40.0 - ym)
        }
    }
}
``` 
 
[Link to the full example](https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin/examples/80_ORX/C200_Image_fit002.kt) 
 
<video controls preload="none" loop poster="../media/image-fit-102-thumb.jpg">
    <source src="../media/image-fit-102.mp4" type="video/mp4">
</video>
 
 
Additionally the placement of the image in the rectangle can be adjusted 
 
```kotlin
fun main() = application {
    program {
        val image = loadImage("data/images/cheeta.jpg")
        extend {
            val margin = 100.0
            drawer.imageFit(image, 20.0, 20.0 + margin / 2, width - 40.0, height - 40.0 - margin, verticalPosition = cos(seconds) * 1.0)
            
            // -- illustrate the placement rectangle
            drawer.fill = null
            drawer.stroke = ColorRGBa.WHITE
            drawer.rectangle(20.0, 20.0 + margin / 2.0, width - 40.0, height - 40.0 - margin)
        }
    }
}
``` 
 
[Link to the full example](https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin/examples/80_ORX/C200_Image_fit003.kt) 

[edit on GitHub](https://github.com/openrndr/openrndr-guide/blob/main/src/main/kotlin/docs/80_ORX/C200_Image_fit.kt){: .btn .btn-github }