---
# File generated by dokgen. Do not edit. 
# Edit 'src/main/kotlin/docs/30_Drawing/C110_Images.kt' instead.
layout: default
title: Images
parent: Drawing
last_modified_at: 2025.10.16 16:50:06 +0000
nav_order: 110
has_children: false
---
 
# Images

Images are stored in `ColorBuffer` instances, the image data resides in GPU memory

## Loading and drawing images

Images are loaded using the `loadImage` function and drawn using `Drawer.image`. 
 
<img alt="../media/image-001.jpg" src="../media/image-001.jpg" loading="lazy"> 
 
```kotlin
fun main() = application {
    configure {}
    program {
        val image = loadImage("data/images/cheeta.jpg")
        
        extend {
            drawer.image(image)
        }
    }
}
``` 
 
[Link to the full example](https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin/examples/30_Drawing/C110_Images000.kt) 
 
To change the location of the image one can use `Drawer.image` with extra coordinates provided. 
 
```kotlin
drawer.image(image, 40.0, 40.0)
``` 
 
Extra `width` and `height` arguments can be provided to draw a scaled version of the image. 
 
```kotlin
drawer.image(image, 40.0, 40.0, 64.0, 48.0)
``` 
 
To rotate an image (or any other element you draw) apply [transformations](/drawing/transformations.html).

## Drawing  parts of images

It is possible to draw parts of images by specifying _source_ and _target_ rectangles. The source rectangle describes
the area that should be taken from the image and presented in the target rectangle. 
 
<img alt="../media/image-002.jpg" src="../media/image-002.jpg" loading="lazy"> 
 
```kotlin
fun main() = application {
    program {
        val image = loadImage("data/images/cheeta.jpg")
        
        extend {
            val source = Rectangle(0.0, 0.0, 320.0, 240.0)
            val target = Rectangle(160.0, 120.0, 320.0, 240.0)
            drawer.image(image, source, target)
        }
    }
}
``` 
 
[Link to the full example](https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin/examples/30_Drawing/C110_Images001.kt) 
 
## Drawing many parts of images 
 
<img alt="../media/image-003.jpg" src="../media/image-003.jpg" loading="lazy"> 
 
```kotlin
fun main() = application {
    program {
        val image = loadImage("data/images/cheeta.jpg")
        
        extend {
            val areas = (0..10).flatMap { y ->
                (0..10).map { x ->
                    val source = Rectangle(x * (width / 10.0), y * (height / 10.0), width / 5.0, height / 5.0)
                    val target = Rectangle(x * (width / 10.0), y * (height / 10.0), width / 10.0, height / 10.0)
                    source to target
                }
            }
            drawer.image(image, areas)
        }
    }
}
``` 
 
[Link to the full example](https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin/examples/30_Drawing/C110_Images002.kt) 
 
## Changing the appearance of images

A linear color transform can be applied to images by setting `Drawer.drawStyle.colorMatrix` to a `Matrix55` value.

### Tinting

Tinting multiplies the image color with a _tint color_. 
 
<img alt="../media/image-004.jpg" src="../media/image-004.jpg" loading="lazy"> 
 
```kotlin
fun main() = application {
    program {
        val image = loadImage("data/images/cheeta.jpg")
        
        extend {
            drawer.drawStyle.colorMatrix = tint(ColorRGBa.RED)
            drawer.image(image, 0.0, 0.0)
        }
    }
}
``` 
 
[Link to the full example](https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin/examples/30_Drawing/C110_Images003.kt) 
 
### Inverting

Drawing an image with inverted colors can be achieved by using the `invert` color matrix. 
 
<img alt="../media/image-005.jpg" src="../media/image-005.jpg" loading="lazy"> 
 
```kotlin
fun main() = application {
    program {
        val image = loadImage("data/images/cheeta.jpg")
        
        extend {
            drawer.drawStyle.colorMatrix = invert
            drawer.image(image, 0.0, 0.0)
        }
    }
}
``` 
 
[Link to the full example](https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin/examples/30_Drawing/C110_Images004.kt) 
 
### Grayscale

Drawing an image in grayscale can be achieved by using the `grayscale` color matrix. 
 
<img alt="../media/image-006.jpg" src="../media/image-006.jpg" loading="lazy"> 
 
```kotlin
fun main() = application {
    program {
        val image = loadImage("data/images/cheeta.jpg")
        
        extend {
            // -- the factors below determine the RGB mixing factors
            drawer.drawStyle.colorMatrix = grayscale(1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0)
            drawer.image(image)
        }
    }
}
``` 
 
[Link to the full example](https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin/examples/30_Drawing/C110_Images005.kt) 
 
### Concatenating color transforms

Color transforms can be combined using the multiplication operator. This is called transform concatenation.
Keep in mind that transform concatenations are read from right to left, and in the following example we first
apply the `grayscale` transform and then the `tint` transform. 
 
<img alt="../media/image-007.jpg" src="../media/image-007.jpg" loading="lazy"> 
 
```kotlin
fun main() = application {
    program {
        val image = loadImage("data/images/cheeta.jpg")
        
        extend {
            // -- here we concatenate the transforms using the multiplication operator.
            drawer.drawStyle.colorMatrix = tint(ColorRGBa.PINK) * grayscale()
            drawer.image(image)
        }
    }
}
``` 
 
[Link to the full example](https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin/examples/30_Drawing/C110_Images006.kt) 

[edit on GitHub](https://github.com/openrndr/openrndr-guide/blob/main/src/main/kotlin/docs/30_Drawing/C110_Images.kt){: .btn .btn-github }